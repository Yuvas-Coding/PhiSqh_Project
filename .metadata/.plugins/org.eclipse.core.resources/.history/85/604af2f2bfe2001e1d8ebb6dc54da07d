package my.com.cmg.iwp.maintenance.model;

import java.beans.Transient;

// Generated Mar 22, 2012 1:22:45 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import org.codehaus.jackson.annotate.JsonIgnoreProperties;

import my.com.cmg.iwp.backend.model.inventory.penalty.PenaltyItem;

/**
 * Item generated by hbm2java
 */
@Entity
@Table(name = "t_items", uniqueConstraints = @UniqueConstraint(columnNames = "item_code"))
@JsonIgnoreProperties(ignoreUnknown=true)
public class Item implements java.io.Serializable, Comparable<Item> {
	private static final long serialVersionUID = 846454440645312712L;
	
	private long itemSeqno = Long.MIN_VALUE;
	private String itemCode;
	private String itemDesc;
	private Character activeFlag = 'A';
	private long createdBy;
	private Date createdDate;
	private long updatedBy;
	private Date updatedDate;
	private String packaging;
	private ItemInformation itemInformation;
	private Long drugSeqno;
	private Long nonDrugSeqno;
	private String itemGroup;
	private String itemType;
	private ItemePMapping itemePMapping;
	private Character vaccineFlag ='N';
//	private Set<ContractDtl> contractDtls = new HashSet<ContractDtl>(0);
	private Set<ApItemPrice> apItemPrices = new HashSet<ApItemPrice>(0);
//	private Set<Brand> brands = new HashSet<Brand>(0);
	private Set<ItemBrand> itemBrands = new HashSet<ItemBrand>(0);
	private Drug drug;
	private NonDrug nonDrug;
	private Long conversionFactor;
	private Uom pkuUom;
	private Long ContractItemQuantity= 0L;
	private Integer minOrderQty;
	private Character prepackGenItemFlag = 'N';
	private Character essentialApprovedProductYN = 'N';
	private Set<PenaltyItem> penaltyItems = new HashSet<PenaltyItem>();
	private Character emergencyItem = 'N'; 
	private Character epOfflineItemFlag = 'N';
	
	private ItemImages itemImages;
	//private Character essentialItem = 'N';
	
	
	@Transient
	public Long getContractItemQuantity() {
		return ContractItemQuantity;
	}

	public void setContractItemQuantity(Long contractItemQuantity) {
		ContractItemQuantity = contractItemQuantity;
	}

	public Item() {
	}

	public Item(long itemSeqno, String itemCode, long createBy,
			Date createDate, long updateBy, Date updateDate) {
		this.itemSeqno = itemSeqno;
		this.itemCode = itemCode;
		this.createdBy = createBy;
		this.createdDate = createDate;
		this.updatedBy = updateBy;
		this.updatedDate = updateDate;
	}

	public Item(long itemSeqno, String itemCode, String itemDesc,
			long createBy, Date createDate, long updateBy, Date updateDate,
			ItemInformation itemInformation) {
		this.itemSeqno = itemSeqno;
		this.itemCode = itemCode;
		this.itemDesc = itemDesc;
		this.createdBy = createBy;
		this.createdDate = createDate;
		this.updatedBy = updateBy;
		this.updatedDate = updateDate;
		this.itemInformation = itemInformation;
	}

	@Id
	@Column(name = "item_seqno", unique = true, nullable = false)
	@SequenceGenerator(name = "itemSEQ", sequenceName = "t_items_seq", allocationSize = 1)
	@GeneratedValue(generator = "itemSEQ")
	public long getItemSeqno() {
		return this.itemSeqno;
	}

	public void setItemSeqno(long itemSeqno) {
		this.itemSeqno = itemSeqno;
	}

	/*
	 * @Temporal(TemporalType.DATE)
	 * 
	 * @Column(name = "item_contract_end", length = 13) public Date
	 * getItemContractEnd() { return this.itemContractEnd; }
	 * 
	 * public void setItemContractEnd(Date itemContractEnd) {
	 * this.itemContractEnd = itemContractEnd; }
	 */
	@Column(name = "item_code", unique = true, nullable = false, length = 20)
	public String getItemCode() {
		return this.itemCode;
	}

	public void setItemCode(String itemCode) {
		this.itemCode = itemCode;
	}

	@Column(name = "item_desc", length = 200)
	public String getItemDesc() {
		return this.itemDesc;
	}

	public void setItemDesc(String itemDesc) {
		this.itemDesc = itemDesc;
	}

	@Column(name = "hq_status")
	public Character getActiveFlag() {
		return this.activeFlag;
	}

	public void setActiveFlag(Character activeFlag) {
		this.activeFlag = activeFlag;
	}
	
	@Column(name = "item_group", length = 10)
	public String getItemGroup() {
		return this.itemGroup;
	}

	public void setItemGroup(String itemGroup) {
		this.itemGroup = itemGroup;
	}

	@Column(name = "created_by", nullable = false)
	public long getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(long createBy) {
		this.createdBy = createBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_date", nullable = false, length = 29)
	public Date getCreatedDate() {
		return this.createdDate;
	}

	public void setCreatedDate(Date createDate) {
		this.createdDate = createDate;
	}

	@Column(name = "updated_by", nullable = false)
	public long getUpdatedBy() {
		return this.updatedBy;
	}

	public void setUpdatedBy(long updateBy) {
		this.updatedBy = updateBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated_date", nullable = false, length = 29)
	public Date getUpdatedDate() {
		return this.updatedDate;
	}

	public void setUpdatedDate(Date updateDate) {
		this.updatedDate = updateDate;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "item", cascade = CascadeType.ALL)
	public ItemInformation getItemInformation() {
		return this.itemInformation;
	}

	public void setItemInformation(ItemInformation itemInformation) {
		this.itemInformation = itemInformation;
	}

	@Column(name = "packaging", length = 50)
	public String getPackaging() {
		return packaging;
	}

	public void setPackaging(String packaging) {
		this.packaging = packaging;
	}

	/*@OneToMany(fetch = FetchType.LAZY, mappedBy = "item")
	public Set<ContractDtl> getContractDtls() {
		return this.contractDtls;
	}

	public void setContractDtls(Set<ContractDtl> contractDtls) {
		this.contractDtls = contractDtls;
	}*/

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "item", cascade = CascadeType.ALL)
	public Set<ApItemPrice> getApItemPrices() {
		return this.apItemPrices;
	}

	public void setApItemPrices(Set<ApItemPrice> apItemPrices) {
		this.apItemPrices = apItemPrices;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "drug_seqno", insertable = false, updatable = false)
	public Drug getDrug() {
		return drug;
	}

	public void setDrug(Drug drug) {
		this.drug = drug;
		if (drug != null)
			this.setDrugSeqno(drug.getDrugSeqno());
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "nondrug_seqno", insertable = false, updatable = false)
	public NonDrug getNonDrug() {
		return nonDrug;
	}

	public void setNonDrug(NonDrug nonDrug) {
		this.nonDrug = nonDrug;
		if (nonDrug != null)
			this.setNonDrugSeqno(nonDrug.getNondrugSeqno());
	}

	/*@ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinTable(name = "t_item_brands_mapping", joinColumns = { @JoinColumn(name = "item_seqno", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "brnd_seqno", nullable = false, updatable = false) })
	public Set<Brand> getBrands() {
		return brands;
	}

	public void setBrands(Set<Brand> brands) {
		this.brands = brands;
	}
*/
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "item", cascade = CascadeType.ALL)
	public Set<ItemBrand> getItemBrands() {
		return itemBrands;
	}

	public void setItemBrands(Set<ItemBrand> itemBrands) {
		this.itemBrands = itemBrands;
	}

	@Column(name = "conversion_factor", length = 10)
	public Long getConversionFactor() {
		return conversionFactor;
	}

	public void setConversionFactor(Long conversionFactor) {
		this.conversionFactor = conversionFactor;
	}

	@ManyToOne
	@JoinColumn(name = "pku_uom_seqno")
	public Uom getPkuUom() {
		return pkuUom;
	}

	public void setPkuUom(Uom pkuUom) {
		this.pkuUom = pkuUom;
	}

	@Override
	public int compareTo(Item anItem) {
		return this.itemCode.compareTo(anItem.getItemCode());
	}

	@Column(name = "drug_seqno")
	public Long getDrugSeqno() {
		return drugSeqno;
	}

	public void setDrugSeqno(Long drugSeqno) {
		this.drugSeqno = drugSeqno;
	}

	@Column(name = "nondrug_seqno")
	public Long getNonDrugSeqno() {
		return nonDrugSeqno;
	}

	public void setNonDrugSeqno(Long nonDrugSeqno) {
		this.nonDrugSeqno = nonDrugSeqno;
	}

	@Column(name = "item_type", nullable=false)
	public String getItemType() {
		return itemType;
	}

	public void setItemType(String itemType) {
		this.itemType = itemType;
	}

	@Column(name = "min_order_qty")
	public Integer getMinOrderQty() {
		return minOrderQty;
	}

	public void setMinOrderQty(Integer minOrderQty) {
		this.minOrderQty = minOrderQty;
	}

	@Column(name = "prepack_Gnrt_Itm_fl")
	public Character getPrepackGenItemFlag() {
		return prepackGenItemFlag;
	}

	public void setPrepackGenItemFlag(Character prepackGenItemFlag) {
		this.prepackGenItemFlag = prepackGenItemFlag;
	}

	@Column(name = "essen_appr_prod")
	public Character getEssentialApprovedProductYN() {
		return essentialApprovedProductYN;
	}

	public void setEssentialApprovedProductYN(Character essentialApprovedProductYN) {
		this.essentialApprovedProductYN = essentialApprovedProductYN;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "item", cascade = CascadeType.ALL)
	public Set<PenaltyItem> getPenaltyItems() {
		return penaltyItems;
	}

	public void setPenaltyItems(Set<PenaltyItem> penaltyItems) {
		this.penaltyItems = penaltyItems;
	}

	@Column(name = "emergency_item")
	public Character getEmergencyItem() { return emergencyItem; }
	public void setEmergencyItem(Character emergencyItem) { this.emergencyItem = emergencyItem; }

	/*@Column(name = "essential_item")
	public Character getEssentialItem() { return essentialItem; }
	public void setEssentialItem(Character essentialItem) { this.essentialItem = essentialItem; }*/

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "item", cascade = CascadeType.ALL)
	public ItemePMapping getItemePMapping() {
		return itemePMapping;
	}
	
	public void setItemePMapping(ItemePMapping itemePMapping) {
		this.itemePMapping = itemePMapping;
	}
	@Column(name = "vaccine_flag")
	public Character getVaccineFlag() {
		return vaccineFlag;
	}

	public void setVaccineFlag(Character vaccineFlag) {
		this.vaccineFlag = vaccineFlag;
	}
	
	@OneToOne(fetch = FetchType.LAZY, mappedBy = "item", cascade = CascadeType.ALL)
	public ItemImages getItemImages() {
		return itemImages;
	}

	public void setItemImages(ItemImages itemImages) {
		this.itemImages = itemImages;
	}

	@Column(name = "EPOFFLINE_FLAG")
	public Character getEpOfflineItemFlag() {
		return epOfflineItemFlag;
	}

	public void setEpOfflineItemFlag(Character epOfflineItemFlag) {
		this.epOfflineItemFlag = epOfflineItemFlag;
	}
	
	
}